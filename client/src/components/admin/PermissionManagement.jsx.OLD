import { useState, useEffect } from 'react';
import { FormControlLabel, Checkbox, Button, Typography } from '@mui/material';

import { defaultRolePermissionsMap, permissions } from '../../Authorizations';

export default function PermissionManagement() {
    // Stato per tenere traccia delle modifiche ai permessi
    const [rolePermissions, setRolePermissions] = useState([...defaultRolePermissionsMap]);

    useEffect(() => {
        // Copia locale della defaultRolePermissionsMap per lavorare su di essa
        const initialPermissions = defaultRolePermissionsMap.map(role => ({
            ...role,
            permissions: role.permissions.reduce((acc, permission) => ({
                ...acc,
                [permission]: isPermissionSelected(role.role, permission)
            }), {})
        }));

        setRolePermissions(initialPermissions);
    }, []);

    // Funzione per gestire il cambiamento di stato dei permessi
    const handlePermissionChange = (roleId, permissionKey) => {
        // Copia l'array di permessi dei ruoli
        const updatedRolePermissions = rolePermissions.map(role => {
            if (role.role === roleId) {
                // Copia l'oggetto del ruolo e aggiorna i permessi
                return {
                    ...role,
                    permissions: {
                        ...role.permissions,
                        [permissionKey]: !role.permissions[permissionKey] // Inverte lo stato del permesso
                    }
                };
            }
            return role;
        });
        // Aggiorna lo stato con i nuovi permessi
        setRolePermissions(updatedRolePermissions);
    };

    // Funzione per verificare se un permesso Ã¨ selezionato per un dato ruolo
    const isPermissionSelected = (roleId, permissionKey) => {
        const role = rolePermissions.find(role => role.role === roleId);
        console.log(`roleId: ${roleId}, permissionKey: ${permissionKey}`)
        console.log("role.permissions: ", role.permissions)
        return role ? role.permissions[permissionKey] : false;
    };

    // Funzione per gestire il salvataggio delle modifiche ai permessi
    const handleSaveChanges = () => {
        // Esegui l'azione per salvare le modifiche ai permessi nel tuo sistema
        console.log('Changes to permissions saved: ', rolePermissions);
    };

    return (
        <div>
            {rolePermissions.map(role => (
                <div key={role.role}>
                    <Typography variant="h6">{role.role}</Typography>
                    {Object.entries(permissions.project).map(([permissionKey, permissionLabel]) => (
                        <FormControlLabel
                            key={permissionKey}
                            control={
                                <Checkbox
                                    checked={isPermissionSelected(role.role, permissionKey)}
                                    onChange={() => handlePermissionChange(role.role, permissionKey)}
                                />
                            }
                            label={permissionLabel}
                        />
                    ))}
                </div>
            ))}
            <Button variant="contained" onClick={handleSaveChanges}>Save Permissions</Button>
        </div>
    );
}
