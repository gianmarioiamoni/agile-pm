import React, { useState, useEffect, useRef } from 'react';
import {
    Button,
    Grid,
    Dialog, DialogTitle, DialogContent, DialogActions,
    TextField,
    IconButton,
    Table, TableBody, TableCell, TableContainer, TableHead, TableRow,
    Paper, Hidden, MenuItem
} from '@mui/material';
import { Edit, Delete, Add, ArrowDownward } from '@mui/icons-material';

import RoleSelect from "./elements/RoleSelect";

import { deleteUser, addUser, editUser, sendNewUserEmail } from "../../services/userServices";
import { generateRandomPassword } from "../../utils/utilities";

export default function UserManagement({ users, setUsers, currentRolesMap }) {

    const [openNewUserDialog, setOpenNewUserDialog] = useState(false);
    const [openEditUserDialog, setOpenEditUserDialog] = useState(false);
    const [editFormData, setEditFormData] = useState({
        username: "",
        role: "",
    });

    const [editedUser, setEditedUser] = useState({});

    const [selectedUserId, setSelectedUserId] = useState(null);
    const [hasScrollableContent, setHasScrollableContent] = useState(false);
    const tableRef = useRef(null);

    useEffect(() => {
        const updateScrollableContent = () => {
            setHasScrollableContent(tableRef.current && tableRef.current.scrollHeight > tableRef.current.clientHeight);
        };

        // Update initial state
        updateScrollableContent();

        // Update the state everytime there is a change in the 'users' array
        const handleResize = () => {
            updateScrollableContent();
        };
        window.addEventListener('resize', handleResize);
        return () => {
            window.removeEventListener('resize', handleResize);
        };
    }, [users]);

    const handleOpenNewUserDialog = () => {
        setOpenNewUserDialog(true);
    };

    const handleCloseNewUserDialog = () => {
        setOpenNewUserDialog(false);
    };

    const handleAddUser = async () => {
        const newPassword = generateRandomPassword();
        const newUser = { ...editFormData, password: newPassword };

        // create new user to the DB
        const savedUser = await addUser(newUser);

        const updatedUserWithId = { ...newUser, id: savedUser?._id };
        setUsers((prevUsers) => [...prevUsers, updatedUserWithId]);

        console.log("users: ", users);


        // Send email to the new user email address
        sendNewUserEmail(newUser.email, newUser.username, newPassword);

        // close dialog
        setOpenNewUserDialog(false);
    };

    const handleEditUser = (userId) => {
        setSelectedUserId(userId);
        setEditedUser(users.find((u) => u.id === userId));
        setOpenEditUserDialog(true);
    };

    const handleCloseEditUserDialog = () => {
        setOpenEditUserDialog(false);
        setSelectedUserId(null);
    };

    const handleEditChange = (e) => {
        const { id, value } = e.target;
        setEditFormData((prevFormData) => ({ ...prevFormData, [id]: value }));
    };

    const handleSaveUserChanges = async () => {
        const editedUserIndex = users.findIndex((user) => user.id === selectedUserId);
        if (editedUserIndex !== -1) {
            const updatedUsers = [...users];
            const edUser = {
                ...updatedUsers[editedUserIndex],
                username: editFormData.username,
                email: editFormData.email,
                role: editedUser.role,
            } 
            updatedUsers[editedUserIndex] = edUser;

            setUsers(updatedUsers);

            // save changes to DB
            await editUser(edUser);

            handleCloseEditUserDialog();
            alert('User details updated successfully!');
        } else {
            console.error('User not found for editing.');
            alert('User not found for editing. Please try again.');
        }
    };

    const handleDeleteUser = async (userId) => {
        const userDescr = users.find((u) => u.id === userId).username;
        const newUsers = users.filter((user) => user.id !== userId);
        setUsers(newUsers);

        // delete role from the DB
        const res = await deleteUser(userId);

        if (res.status === 200) {
            alert(`User ${userDescr} successfully deleted`);
        } else {
            alert("Impossible to delete the user");
        }
    };

    const getRoleDescription = (roleId) => {
        const roleObj = currentRolesMap.find((role) => role.id === roleId);
        return roleObj ? roleObj.description : null;
    };

    return (
        <Grid container spacing={2}>
            {/* Users Table */}
            <Grid item xs={12}>
                {hasScrollableContent && (
                    <div style={{ position: "absolute", right: "10px", bottom: "10px" }}>
                        <IconButton>
                            <ArrowDownward />
                        </IconButton>
                    </div>
                )}
                <TableContainer component={Paper} sx={{ position: "relative", overflowY: "auto" }}>
                    <Table size="small" dense="true">
                        <TableHead>
                            <TableRow>
                                <TableCell><b>User Name</b></TableCell>
                                <TableCell><b>Email</b></TableCell>
                                <TableCell><b>Role</b></TableCell>
                                <TableCell><b>Actions</b></TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {users.map((user) => (
                                <TableRow key={user.id}>
                                    {/* User details */}
                                    <TableCell>{user.username}</TableCell>
                                    <TableCell>{user.email}</TableCell>
                                    <TableCell>{getRoleDescription(user.role)}</TableCell>
                                    {/* Actions for the User */}
                                    <TableCell>
                                        <IconButton onClick={() => handleEditUser(user.id)} aria-label="edit">
                                            <Edit fontSize="small" />
                                        </IconButton>
                                        <IconButton onClick={() => handleDeleteUser(user.id)} aria-label="delete">
                                            <Delete fontSize="small" />
                                        </IconButton>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
            </Grid>

            {/* Add User Button */}
            <Grid item xs={12} md={6}>
                <Button
                    variant="contained"
                    startIcon={<Add />}
                    onClick={handleOpenNewUserDialog}
                    fullWidth
                >
                    Add User
                </Button>
            </Grid>

            {/* Add User Dialog */}
            <Hidden smDown>
                <Grid item md={6}>
                    <Dialog open={openNewUserDialog} onClose={handleCloseNewUserDialog}>
                        <DialogTitle>Add User</DialogTitle>
                        <DialogContent>
                            <TextField
                                autoFocus
                                margin="dense"
                                id="username"
                                label="Username"
                                type="text"
                                fullWidth
                                onChange={handleEditChange}
                            />
                            <TextField
                                id="email"
                                label="Email"
                                defaultValue={selectedUserId ? users.find((user) => user.id === selectedUserId).email : ''}
                                onChange={handleEditChange}
                                fullWidth // Aggiungiamo questa prop per impostare la larghezza uguale agli altri campi
                            />
                            <RoleSelect
                                value={editFormData.role}
                                onChange={(e) => setEditFormData((prevFormData) => ({ ...prevFormData, role: e.target.value }))}
                                roles={currentRolesMap}
                            />
                        </DialogContent>
                        <DialogActions>
                            <Button onClick={handleCloseNewUserDialog}>Cancel</Button>
                            <Button onClick={handleAddUser} variant="contained" color="primary">Add</Button>
                        </DialogActions>
                    </Dialog>
                </Grid>
            </Hidden>

            {/* Edit User Dialog  */}
            <Hidden smDown>
                <Grid item md={6}>
                    <Dialog open={openEditUserDialog} onClose={handleCloseEditUserDialog}>
                        <DialogTitle>Edit User</DialogTitle>
                        <DialogContent>
                            <TextField
                                id="username"
                                label="User Name"
                                defaultValue={selectedUserId ? editedUser.username : ''}
                                onChange={handleEditChange}
                                fullWidth
                                margin="normal"
                            />
                            <TextField
                                id="email"
                                label="Email"
                                defaultValue={selectedUserId ? users.find((user) => user.id === selectedUserId).email : ''}
                                onChange={handleEditChange}
                                fullWidth
                                margin="normal"
                            />
                            <RoleSelect
                                value={editedUser.role}
                                onChange={(e) => setEditedUser((prev) => ({ ...prev, role: e.target.value }))}
                                roles={currentRolesMap}
                            />
                        </DialogContent>
                        <DialogActions>
                            <Button onClick={handleCloseEditUserDialog}>Cancel</Button>
                            <Button onClick={handleSaveUserChanges}>Save Changes</Button>
                        </DialogActions>
                    </Dialog>
                </Grid>
            </Hidden>
        </Grid>
    );
}
